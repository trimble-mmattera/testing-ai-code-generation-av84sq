name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        options:
          - unit
          - integration
          - e2e
          - all
      coverage:
        description: 'Generate coverage report'
        required: false
        default: 'true'
        type: boolean

env:
  GO_VERSION: '1.21'
  COVERAGE_THRESHOLD: '80'
  TEST_TIMEOUT: '10m'
  COVERAGE_DIR: './coverage'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        working-directory: src/backend
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: src/backend
          args: --config=.golangci.yml

      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: src/backend/golangci-lint-report.xml
          retention-days: 7

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: src/backend
        run: go mod download

      - name: Run unit tests with coverage
        working-directory: src/backend
        run: |
          mkdir -p ${{ env.COVERAGE_DIR }}
          go test -v -race -timeout ${{ env.TEST_TIMEOUT }} -tags=unit ./pkg/... ./domain/... ./application/... -coverprofile=${{ env.COVERAGE_DIR }}/unit.out -covermode=atomic

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: src/backend/${{ env.COVERAGE_DIR }}/unit.out
          flags: unit-tests
          name: codecov-unit
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: src/backend/${{ env.COVERAGE_DIR }}/unit.out
          retention-days: 7

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: minio/minio
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        ports:
          - 9000:9000
        options: --command server /data
      elasticsearch:
        image: elasticsearch:8.0.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          xpack.security.enabled: "false"
        ports:
          - 9200:9200
        options: "--health-cmd 'curl -s http://localhost:9200/_cluster/health' --health-interval 10s --health-timeout 5s --health-retries 10"
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: src/backend
        run: go mod download

      - name: Set up test environment
        working-directory: src/backend
        run: |
          # Create test buckets in MinIO
          apt-get update && apt-get install -y curl
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          ./mc mb myminio/document-mgmt-test-docs
          ./mc mb myminio/document-mgmt-test-temp
          ./mc mb myminio/document-mgmt-test-quarantine

      - name: Run integration tests with coverage
        working-directory: src/backend
        run: |
          mkdir -p ${{ env.COVERAGE_DIR }}
          export GO_ENV=test
          export CONFIG_PATH=$(pwd)/config
          go test -v -race -timeout ${{ env.TEST_TIMEOUT }} -tags=integration ./test/integration/... -coverprofile=${{ env.COVERAGE_DIR }}/integration.out -covermode=atomic

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: src/backend/${{ env.COVERAGE_DIR }}/integration.out
          flags: integration-tests
          name: codecov-integration
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: src/backend/${{ env.COVERAGE_DIR }}/integration.out
          retention-days: 7

  e2e-tests:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: minio/minio
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        ports:
          - 9000:9000
        options: --command server /data
      elasticsearch:
        image: elasticsearch:8.0.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          xpack.security.enabled: "false"
        ports:
          - 9200:9200
        options: "--health-cmd 'curl -s http://localhost:9200/_cluster/health' --health-interval 10s --health-timeout 5s --health-retries 10"
      clamav:
        image: clamav/clamav
        ports:
          - 3310:3310
        options: "--health-cmd 'clamdscan --version' --health-interval 10s --health-timeout 5s --health-retries 10"
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: src/backend
        run: go mod download

      - name: Set up test environment
        working-directory: src/backend
        run: |
          # Create test buckets in MinIO
          apt-get update && apt-get install -y curl
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          ./mc mb myminio/document-mgmt-test-docs
          ./mc mb myminio/document-mgmt-test-temp
          ./mc mb myminio/document-mgmt-test-quarantine

      - name: Run end-to-end tests
        working-directory: src/backend
        run: |
          export GO_ENV=test
          export CONFIG_PATH=$(pwd)/config
          go test -v -timeout ${{ env.TEST_TIMEOUT }} -tags=e2e ./test/e2e/...

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: src/backend/test/e2e/results
          retention-days: 7

  coverage-report:
    name: Generate combined coverage report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: ${{ github.event.inputs.coverage == 'true' || github.event.inputs.coverage == '' }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Combine coverage reports
        run: |
          mkdir -p src/backend/${{ env.COVERAGE_DIR }}
          cp artifacts/unit-test-results/unit.out src/backend/${{ env.COVERAGE_DIR }}/
          cp artifacts/integration-test-results/integration.out src/backend/${{ env.COVERAGE_DIR }}/

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate HTML coverage report
        working-directory: src/backend
        run: |
          # Install gocovmerge
          go install github.com/wadey/gocovmerge@latest
          # Combine coverage files
          gocovmerge ${{ env.COVERAGE_DIR }}/unit.out ${{ env.COVERAGE_DIR }}/integration.out > ${{ env.COVERAGE_DIR }}/coverage.out
          # Generate HTML report
          mkdir -p ${{ env.COVERAGE_DIR }}/html
          go tool cover -html=${{ env.COVERAGE_DIR }}/coverage.out -o=${{ env.COVERAGE_DIR }}/html/coverage.html

      - name: Check coverage threshold
        working-directory: src/backend
        run: |
          go tool cover -func=${{ env.COVERAGE_DIR }}/coverage.out
          COVERAGE_PCT=$(go tool cover -func=${{ env.COVERAGE_DIR }}/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total Coverage: $COVERAGE_PCT%"
          
          # Convert to integers for comparison (remove decimal part)
          COVERAGE_INT=${COVERAGE_PCT%.*}
          THRESHOLD_INT=${{ env.COVERAGE_THRESHOLD }}
          
          if [ "$COVERAGE_INT" -lt "$THRESHOLD_INT" ]; then
            echo "::error::Combined test coverage ($COVERAGE_PCT%) is below threshold (${{ env.COVERAGE_THRESHOLD }}%)"
            exit 1
          fi

      - name: Upload combined coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: src/backend/${{ env.COVERAGE_DIR }}/coverage.out
          flags: all-tests
          name: codecov-combined
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload HTML coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-html
          path: src/backend/${{ env.COVERAGE_DIR }}/html
          retention-days: 7