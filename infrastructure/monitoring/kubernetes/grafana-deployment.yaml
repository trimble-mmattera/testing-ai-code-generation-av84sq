apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
  # Metadata for the Grafana deployment, including name, namespace, and labels.
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  # Specification for the deployment, including the number of replicas and the selector for identifying the pods.
  strategy:
    type: Recreate
  # Deployment strategy set to 'Recreate', which means all old pods are deleted before new ones are created.
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
      # Metadata for the pod template, including labels and annotations for Prometheus scraping.
    spec:
      securityContext:
        fsGroup: 472
        runAsNonRoot: True
        runAsUser: 472
      # Security context for the pod, setting the fsGroup and ensuring the container runs as a non-root user.
      containers:
        - name: grafana
          image: grafana/grafana:9.3.6 # grafana/grafana v9.3.6
          imagePullPolicy: IfNotPresent
          # Container specification for Grafana, including the image to use and the image pull policy.
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          # Container ports configuration, exposing port 3000 for HTTP traffic.
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          # Resource requests and limits for the Grafana container.
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
            - name: GF_SERVER_ROOT_URL
              value: "%(protocol)s://%(domain)s/grafana"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
          # Environment variables for configuring Grafana, including admin credentials and plugin installation.
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboard-providers
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards/document-management
          # Volume mounts for Grafana, including storage, datasources, and dashboards.
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
          # Liveness and readiness probes for Grafana, checking the health endpoint.
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboard-providers
          configMap:
            name: grafana-dashboard-providers
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
      # Volumes used by Grafana, including persistent volume claim for storage and config maps for datasources and dashboards.
      nodeSelector:
        kubernetes.io/os: linux
      # Node selector to ensure the pod runs on Linux nodes.
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/monitoring
                    operator: Exists
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      # Affinity and anti-affinity rules for scheduling the pod.
      tolerations:
        - key: monitoring
          operator: Equal
          value: "true"
          effect: NoSchedule
      # Tolerations for the pod, allowing it to be scheduled on nodes with the 'monitoring' taint.